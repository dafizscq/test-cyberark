---
# Cyberark pre-tasks
- name: "[CYBERARK] Check for Cyberark credentials (certificate and key)"
  ansible.builtin.assert:
    that:
      - "{{ item }} is defined"
      - "{{ item }} | length > 0"
    msg: "{{ item }} variable is not defined or empty. Add it to Tower template and try again"
    loop:
      - CYBERARK_CLIENT_CERT
      - CYBERARK_PRIV_KEY
  # no_log: true
  delegate_to: localhost

- name: "[CYBERARK] Get ssh_host_rsa_key from Cyberark, don't fail if it doesn't exist"
  cyberark.pas.cyberark_credential:
    api_base_url: "{{ cyberark_server_api }}"
    client_cert: "{{ CYBERARK_CLIENT_CERT }}"
    client_key: "{{ CYBERARK_PRIV_KEY }}"
    validate_certs: false
    app_id: "{{ cyberark_app_id }}"
    query: "Safe={{ cyberark_safe }};Object={{ cyberark_ssh_host_rsa_key_object_pattern }}-{{ ansible_hostname }}"
  register: cyberark_ssh_host_rsa_key
  delegate_to: localhost
  no_log: true
  ignore_errors: true

- name: "[CYBERARK] Get ssh_host_rsa_key_pub from Cyberark, don't fail if it doesn't exist"
  cyberark.pas.cyberark_credential:
    api_base_url: "{{ cyberark_server_api }}"
    client_cert: "{{ CYBERARK_CLIENT_CERT }}"
    client_key: "{{ CYBERARK_PRIV_KEY }}"
    validate_certs: false
    app_id: "{{ cyberark_app_id }}"
    query: "Safe={{ cyberark_safe }};Object={{ cyberark_ssh_host_rsa_key_pub_object_pattern }}-{{ ansible_hostname }}"
  register: cyberark_ssh_host_rsa_key_pub
  delegate_to: localhost
  no_log: true
  ignore_errors: true

- name: "[CYBERARK] Get ssh_host_ed25519_key from Cyberark, don't fail if it doesn't exist"
  cyberark.pas.cyberark_credential:
    api_base_url: "{{ cyberark_server_api }}"
    client_cert: "{{ CYBERARK_CLIENT_CERT }}"
    client_key: "{{ CYBERARK_PRIV_KEY }}"
    validate_certs: false
    app_id: "{{ cyberark_app_id }}"
    query: "Safe={{ cyberark_safe }};Object={{ cyberark_ssh_host_ed25519_key_object_pattern }}-{{ ansible_hostname }}"
  register: cyberark_ssh_host_ed25519_key
  delegate_to: localhost
  no_log: true
  ignore_errors: true

- name: "[CYBERARK] Get ssh_host_ed25519_key_pub from Cyberark, don't fail if it doesn't exist"
  cyberark.pas.cyberark_credential:
    api_base_url: "{{ cyberark_server_api }}"
    client_cert: "{{ CYBERARK_CLIENT_CERT }}"
    client_key: "{{ CYBERARK_PRIV_KEY }}"
    validate_certs: false
    app_id: "{{ cyberark_app_id }}"
    query: "Safe={{ cyberark_safe }};Object={{ cyberark_ssh_host_ed25519_key_pub_object_pattern }}-{{ ansible_hostname }}"
  register: cyberark_ssh_host_ed25519_key_pub
  delegate_to: localhost
  no_log: true
  ignore_errors: true

- name: "[CYBERARK] Get ssh_host_ecdsa_key from Cyberark, don't fail if it doesn't exist"
  cyberark.pas.cyberark_credential:
    api_base_url: "{{ cyberark_server_api }}"
    client_cert: "{{ CYBERARK_CLIENT_CERT }}"
    client_key: "{{ CYBERARK_PRIV_KEY }}"
    validate_certs: false
    app_id: "{{ cyberark_app_id }}"
    query: "Safe={{ cyberark_safe }};Object={{ cyberark_ssh_host_ecdsa_key_object_pattern }}-{{ ansible_hostname }}"
  register: cyberark_ssh_host_ecdsa_key
  delegate_to: localhost
  no_log: true
  ignore_errors: true

- name: "[CYBERARK] Get ssh_host_ecdsa_key_pub from Cyberark, don't fail if it doesn't exist"
  cyberark.pas.cyberark_credential:
    api_base_url: "{{ cyberark_server_api }}"
    client_cert: "{{ CYBERARK_CLIENT_CERT }}"
    client_key: "{{ CYBERARK_PRIV_KEY }}"
    validate_certs: false
    app_id: "{{ cyberark_app_id }}"
    query: "Safe={{ cyberark_safe }};Object={{ cyberark_ssh_host_ecdsa_key_pub_object_pattern }}-{{ ansible_hostname }}"
  register: cyberark_ssh_host_ecdsa_key_pub
  delegate_to: localhost
  no_log: true
  ignore_errors: true

- name: Set ssh_host_rsa_key value in file
  ansible.builtin.copy:
    content: "{{ cyberark_ssh_host_rsa_key.result.Content }}"
    # dest: "/etc/ssh/ssh_host_rsa_key"
    dest: "/tmp/ssh_host_rsa_key"
    owner: root
    group: root
    mode: '0600'
    backup: true
  when: cyberark_ssh_host_rsa_key.result.Content is defined

- name: Set ssh_host_rsa_key_pub value in file
  ansible.builtin.copy:
    content: "ssh-rsa {{ cyberark_ssh_host_rsa_key_pub.result.Content }}"
    # dest: "/etc/ssh/ssh_host_rsa_key.pub"
    dest: "/tmp/ssh_host_rsa_key.pub"
    owner: root
    group: root
    mode: '0600'
    backup: true
  when: cyberark_ssh_host_rsa_key_pub.result.Content is defined

- name: Set ssh_host_ed25519_key value in file
  ansible.builtin.copy:
    content: "{{ cyberark_ssh_host_ed25519_key.result.Content }}"
    # dest: "/etc/ssh/ssh_host_ed25519_key"
    dest: "/tmp/ssh_host_ed25519_key"
    owner: root
    group: root
    mode: '0600'
    backup: true
  when: cyberark_ssh_host_ed25519_key.result.Content is defined

- name: Set ssh_host_ed25519_key_pub value in file
  ansible.builtin.copy:
    content: "ssh-ed25519 {{ cyberark_ssh_host_ed25519_key_pub.result.Content }}"
    # dest: "/etc/ssh/ssh_host_ed25519_key.pub"
    dest: "/tmp/ssh_host_ed25519_key.pub"
    owner: root
    group: root
    mode: '0600'
    backup: true
  when: cyberark_ssh_host_ed25519_key_pub.result.Content is defined

- name: Set ssh_host_ecdsa_key value in file
  ansible.builtin.copy:
    content: "{{ cyberark_ssh_host_ecdsa_key.result.Content }}"
    # dest: "/etc/ssh/ssh_host_ecdsa_key"
    dest: "/tmp/ssh_host_ecdsa_key"
    owner: root
    group: root
    mode: '0600'
    backup: true
  when: cyberark_ssh_host_ecdsa_key.result.Content is defined

- name: Set ssh_host_ecdsa_key_pub value in file
  ansible.builtin.copy:
    content: "ecdsa-sha2-nistp256 {{ cyberark_ssh_host_ecdsa_key_pub.result.Content }}"
    # dest: "/etc/ssh/ssh_host_ecdsa_key.pub"
    dest: "/tmp/ssh_host_ecdsa_key.pub"
    owner: root
    group: root
    mode: '0600'
    backup: true
  when: cyberark_ssh_host_ecdsa_key_pub.result.Content is defined
